// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Copyright 2018 Boundary Devices
 */

/dts-v1/;
#define MX8MMN(a, b)	MX8MM_##a b
#define IMX8MMN(a)	IMX8MM_##a

#include "imx8mm.dtsi"

&iomuxc {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_hog>;

	pinctrl_bt_rfkill: bt-rfkillgrp {
		fsl,pins = <
#define GP_BT_RFKILL_RESET	<&gpio3 14 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_NAND_DQS_GPIO3_IO14, 0x119)
		>;
	};

	pinctrl_ecspi2: ecspi2grp {
		fsl,pins = <
			/* U29 ZGM130S037HGN1R zwave controller */
			MX8MMN(IOMUXC_ECSPI2_SCLK_ECSPI2_SCLK, 0x19)
			MX8MMN(IOMUXC_ECSPI2_MISO_ECSPI2_MISO, 0x19)
			MX8MMN(IOMUXC_ECSPI2_MOSI_ECSPI2_MOSI, 0x19)
#define GP_ECSPI2_CS0	<&gpio5 13 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_ECSPI2_SS0_GPIO5_IO13, 0x140)
		>;
	};

	pinctrl_fec1: fec1grp {
		fsl,pins = <
			/* PAD_CTL_ODE is screwy on 8mm mini, avoid it */
#define GP_MII_MDC	<&gpio1 16 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_ENET_MDC_GPIO1_IO16, 0x00)
#define GP_MII_MDIO	<&gpio1 17 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_ENET_MDIO_GPIO1_IO17, 0x00)
			MX8MMN(IOMUXC_ENET_RD0_ENET1_RGMII_RD0, 0x91)
			MX8MMN(IOMUXC_ENET_RD1_ENET1_RGMII_RD1, 0x91)
			MX8MMN(IOMUXC_ENET_RD2_ENET1_RGMII_RD2, 0x91)
			MX8MMN(IOMUXC_ENET_RD3_ENET1_RGMII_RD3, 0x91)
			MX8MMN(IOMUXC_ENET_RXC_ENET1_RGMII_RXC, 0x91)
			MX8MMN(IOMUXC_ENET_RX_CTL_ENET1_RGMII_RX_CTL, 0x91)
			MX8MMN(IOMUXC_ENET_TD0_ENET1_RGMII_TD0, 0x1f)
			MX8MMN(IOMUXC_ENET_TD1_ENET1_RGMII_TD1, 0x1f)
			MX8MMN(IOMUXC_ENET_TD2_ENET1_RGMII_TD2, 0x1f)
			MX8MMN(IOMUXC_ENET_TD3_ENET1_RGMII_TD3, 0x1f)
			MX8MMN(IOMUXC_ENET_TXC_ENET1_RGMII_TXC, 0x1f)
			MX8MMN(IOMUXC_ENET_TX_CTL_ENET1_RGMII_TX_CTL, 0x1f)
#define GP_FEC1_RESET	<&gpio3 15 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_NAND_RE_B_GPIO3_IO15, 0x159)
#define GPIRQ_FEC1_PHY	<&gpio3 16 IRQ_TYPE_LEVEL_LOW>
			MX8MMN(IOMUXC_NAND_READY_B_GPIO3_IO16, 0x159)
		>;
	};

	pinctrl_gpio_keys: gpio_keysgrp {
		fsl,pins = <
#define GP_GPIOKEY_POWER_FAIL	<&gpio1 3 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_GPIO1_IO03_GPIO1_IO3, 0x00)
		>;
	};

	pinctrl_gpio_leds: gpio-ledsgrp {
		fsl,pins = <
#define GP_GPIOLEDS_RED1	<&gpio5 3 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SPDIF_TX_GPIO5_IO3, 0x140)
#define GP_GPIOLEDS_GREEN1	<&gpio5 4 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SPDIF_RX_GPIO5_IO4, 0x140)
#define GP_GPIOLEDS_BLUE1	<&gpio5 5 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SPDIF_EXT_CLK_GPIO5_IO5, 0x140)

#define GP_GPIOLEDS_RED2	<&gpio3 25 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI5_MCLK_GPIO3_IO25, 0x140)
#define GP_GPIOLEDS_GREEN2	<&gpio3 20 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI5_RXC_GPIO3_IO20, 0x140)
#define GP_GPIOLEDS_BLUE2	<&gpio3 19 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI5_RXFS_GPIO3_IO19, 0x140)

#define GP_GPIOLEDS_RED3	<&gpio3 21 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI5_RXD0_GPIO3_IO21, 0x140)
#define GP_GPIOLEDS_GREEN3	<&gpio3 22 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI5_RXD1_GPIO3_IO22, 0x140)
#define GP_GPIOLEDS_BLUE3	<&gpio3 23 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI5_RXD2_GPIO3_IO23, 0x140)
                >;
        };

	pinctrl_hog: hoggrp {
		fsl,pins = <
			/* WU1: Silex, QCA 9377-3 */
			MX8MMN(IOMUXC_SAI2_RXFS_GPIO4_IO21, 0x1c0)	/* pin 8, SDIO_INT_L */
			MX8MMN(IOMUXC_SAI2_MCLK_GPIO4_IO27, 0x1c0)	/* pin 42: BT_UART_WH */
			MX8MMN(IOMUXC_SAI3_RXC_GPIO4_IO29, 0x1c0)	/* pin 38, CLK_REQ_OUT */

			/* test points */
			MX8MMN(IOMUXC_SD2_WP_GPIO2_IO20	, 0x1c0)	/* tp2 */
			MX8MMN(IOMUXC_SD2_RESET_B_GPIO2_IO19, 0x1c0)	/* tp7 */
			MX8MMN(IOMUXC_SD1_STROBE_GPIO2_IO11, 0x1c0)	/* tp9 */
			MX8MMN(IOMUXC_NAND_ALE_GPIO3_IO0, 0x1c0)	/* tp24 */
			MX8MMN(IOMUXC_NAND_DATA00_GPIO3_IO6, 0x1c0)	/* tp25 */
			MX8MMN(IOMUXC_SAI2_RXC_GPIO4_IO22, 0x1c0)	/* tp26 */
			MX8MMN(IOMUXC_SAI5_RXD3_GPIO3_IO24, 0x1c0)	/* tp27 */
			MX8MMN(IOMUXC_GPIO1_IO11_GPIO1_IO11, 0x1c0)	/* tp28 */
			MX8MMN(IOMUXC_GPIO1_IO07_GPIO1_IO7, 0x1c0)	/* tp40 */
		>;
	};

	pinctrl_i2c1: i2c1grp {
		fsl,pins = <
			MX8MMN(IOMUXC_I2C1_SCL_I2C1_SCL, 0x400001c3)
			MX8MMN(IOMUXC_I2C1_SDA_I2C1_SDA, 0x400001c3)
		>;
	};

	pinctrl_i2c1_1: i2c1_1grp {
		fsl,pins = <
#define GP_I2C1_SCL	<&gpio5 14 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C1_SCL_GPIO5_IO14, 0x400001c3)
#define GP_I2C1_SDA	<&gpio5 15 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C1_SDA_GPIO5_IO15, 0x400001c3)
		>;
	};

	pinctrl_i2c1_pf8100: i2c1-pf8100grp {
		fsl,pins = <
#define GP_I2C1_PF8100_EWARN	<&gpio3 3 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_NAND_CE2_B_GPIO3_IO3, 0x149)
#define GP_I2C1_PF8100_FAULT	<&gpio3 4 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_NAND_CE3_B_GPIO3_IO4, 0x149)
		>;
	};

	pinctrl_i2c2: i2c2grp {
		fsl,pins = <
			MX8MMN(IOMUXC_I2C2_SCL_I2C2_SCL, 0x400001c3)
			MX8MMN(IOMUXC_I2C2_SDA_I2C2_SDA, 0x400001c3)
		>;
	};

	pinctrl_i2c2_1: i2c2_1grp {
		fsl,pins = <
#define GP_I2C2_SCL	<&gpio5 16 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C2_SCL_GPIO5_IO16, 0x400001c3)
#define GP_I2C2_SDA	<&gpio5 17 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C2_SDA_GPIO5_IO17, 0x400001c3)
		>;
	};

	pinctrl_i2c2_rv3028: i2c2-rv3028grp {
		fsl,pins = <
#define GPIRQ_RV3028		<&gpio1 1 IRQ_TYPE_LEVEL_LOW>
			MX8MMN(IOMUXC_GPIO1_IO01_GPIO1_IO1, 0x1c0)
#define GP_RV3028_EVI		<&gpio1 5 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_GPIO1_IO05_GPIO1_IO5, 0x140)

		>;
	};

	/* No connected to anything */
	pinctrl_i2c3: i2c3grp {
		fsl,pins = <
			MX8MMN(IOMUXC_I2C3_SCL_I2C3_SCL	, 0x400001c3)
			MX8MMN(IOMUXC_I2C3_SDA_I2C3_SDA	, 0x400001c3)
		>;
	};

	pinctrl_i2c3_1: i2c3_1grp {
		fsl,pins = <
#define GP_I2C3_SCL	<&gpio5 18 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C3_SCL_GPIO5_IO18, 0x400001c3)
#define GP_I2C3_SDA	<&gpio5 19 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C3_SDA_GPIO5_IO19, 0x400001c3)
		>;
	};

	/* Goes to PCIE connector */
	pinctrl_i2c4: i2c4grp {
		fsl,pins = <
			MX8MMN(IOMUXC_I2C4_SCL_I2C4_SCL, 0x400001c3)
			MX8MMN(IOMUXC_I2C4_SDA_I2C4_SDA, 0x400001c3)
		>;
	};

	pinctrl_i2c4_1: i2c4_1grp {
		fsl,pins = <
#define GP_I2C4_SCL	<&gpio5 20 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C4_SCL_GPIO5_IO20, 0x400001c3)
#define GP_I2C4_SDA	<&gpio5 21 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_I2C4_SDA_GPIO5_IO21, 0x400001c3)
		>;
	};

	pinctrl_pcie0: pcie0grp {
		fsl,pins = <
#define GP_PCIE0_RESET		<&gpio4 31 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI3_TXFS_GPIO4_IO31, 0x100)
#define GP_PCIE0_DISABLE	<&gpio1 4 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_GPIO1_IO04_GPIO1_IO4, 0x100)
		>;
	};

	/* For EC21-ALCC modem */
	pinctrl_reg_3p7v: reg-3p7vgrp {
		fsl,pins = <
#define GP_REG_3P7V	<&gpio5 0 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI3_TXC_GPIO5_IO0, 0x116)
		>;
	};

	pinctrl_reg_usdhc2_vqmmc: reg_usdhc2_vqmmcgrp {
		fsl,pins = <
#define GP_USDHC2_VSEL	<&gpio3 2 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_NAND_CE1_B_GPIO3_IO2, 0x116)
		>;
	};

	pinctrl_reg_wlan_vmmc: reg-wlan-vmmcgrp {
		fsl,pins = <
#define GP_REG_WLAN_VMMC	<&gpio4 18 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI1_TXD6_GPIO4_IO18, 0x116)
		>;
	};

	pinctrl_sai2: sai2grp {
		fsl,pins = <
			/* Bluetooth PCM */
			MX8MMN(IOMUXC_SAI2_TXFS_SAI2_TX_SYNC, 0xd6)
			MX8MMN(IOMUXC_SAI2_TXC_SAI2_TX_BCLK, 0xd6)
			MX8MMN(IOMUXC_SAI2_TXD0_SAI2_TX_DATA0, 0xd6)
			MX8MMN(IOMUXC_SAI2_RXD0_SAI2_RX_DATA0, 0xd6)
		>;
	};

	pinctrl_uart1: uart1grp {
		fsl,pins = <
			MX8MMN(IOMUXC_UART1_RXD_UART1_DCE_RX, 0x140)
			MX8MMN(IOMUXC_UART1_TXD_UART1_DCE_TX, 0x140)
			MX8MMN(IOMUXC_UART3_RXD_UART1_DCE_CTS_B, 0x140)
			MX8MMN(IOMUXC_UART3_TXD_UART1_DCE_RTS_B, 0x140)
		>;
	};

	pinctrl_uart2: uart2grp {
		fsl,pins = <
			MX8MMN(IOMUXC_UART2_RXD_UART2_DCE_RX, 0x140)
			MX8MMN(IOMUXC_UART2_TXD_UART2_DCE_TX, 0x140)
		>;
	};

	pinctrl_uart3: uart3grp {
		fsl,pins = <
			MX8MMN(IOMUXC_ECSPI1_SCLK_UART3_DCE_RX, 0x140)
			MX8MMN(IOMUXC_ECSPI1_MOSI_UART3_DCE_TX, 0x140)
			MX8MMN(IOMUXC_ECSPI1_SS0_UART3_DCE_RTS_B, 0x140)
			MX8MMN(IOMUXC_ECSPI1_MISO_UART3_DCE_CTS_B, 0x140)
		>;
	};

	pinctrl_uart4: uart4grp {
		fsl,pins = <
			MX8MMN(IOMUXC_UART4_RXD_UART4_DCE_RX, 0x140)
			MX8MMN(IOMUXC_UART4_TXD_UART4_DCE_TX, 0x140)
		>;
	};

	pinctrl_usbotg1: usbotg1grp {
		fsl,pins = <
			MX8MMN(IOMUXC_GPIO1_IO12_USB1_OTG_PWR, 0x16)
			MX8MMN(IOMUXC_GPIO1_IO13_USB1_OTG_OC, 0x156)
		>;
	};

	pinctrl_usbotg2: usbotg2grp {
		fsl,pins = <
			MX8MMN(IOMUXC_GPIO1_IO14_USB2_OTG_PWR, 0x16)
			MX8MMN(IOMUXC_GPIO1_IO15_USB2_OTG_OC, 0x156)
		>;
	};

	pinctrl_usdhc1: usdhc1grp {
		fsl,pins = <
			MX8MMN(IOMUXC_SD1_CLK_USDHC1_CLK, 0x190)
			MX8MMN(IOMUXC_SD1_CMD_USDHC1_CMD, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA0_USDHC1_DATA0, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA1_USDHC1_DATA1, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA2_USDHC1_DATA2, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA3_USDHC1_DATA3, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA4_USDHC1_DATA4, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA5_USDHC1_DATA5, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA6_USDHC1_DATA6, 0x1d0)
			MX8MMN(IOMUXC_SD1_DATA7_USDHC1_DATA7, 0x1d0)
#define GP_EMMC_RESET		<&gpio2 10 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SD1_RESET_B_GPIO2_IO10, 0x111)
		>;
	};

	pinctrl_usdhc1_100mhz: usdhc1grp100mhz {
		fsl,pins = <
			MX8MMN(IOMUXC_SD1_CLK_USDHC1_CLK, 0x194)
			MX8MMN(IOMUXC_SD1_CMD_USDHC1_CMD, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA0_USDHC1_DATA0, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA1_USDHC1_DATA1, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA2_USDHC1_DATA2, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA3_USDHC1_DATA3, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA4_USDHC1_DATA4, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA5_USDHC1_DATA5, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA6_USDHC1_DATA6, 0x1d4)
			MX8MMN(IOMUXC_SD1_DATA7_USDHC1_DATA7, 0x1d4)
		>;
	};

	pinctrl_usdhc1_200mhz: usdhc1grp200mhz {
		fsl,pins = <
			MX8MMN(IOMUXC_SD1_CLK_USDHC1_CLK, 0x196)
			MX8MMN(IOMUXC_SD1_CMD_USDHC1_CMD, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA0_USDHC1_DATA0, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA1_USDHC1_DATA1, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA2_USDHC1_DATA2, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA3_USDHC1_DATA3, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA4_USDHC1_DATA4, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA5_USDHC1_DATA5, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA6_USDHC1_DATA6, 0x1d6)
			MX8MMN(IOMUXC_SD1_DATA7_USDHC1_DATA7, 0x1d6)
		>;
	};

	pinctrl_usdhc2: usdhc2grp {
		fsl,pins = <
			MX8MMN(IOMUXC_SD2_CLK_USDHC2_CLK, 0x190)
			MX8MMN(IOMUXC_SD2_CMD_USDHC2_CMD, 0x1d0)
			MX8MMN(IOMUXC_SD2_DATA0_USDHC2_DATA0, 0x1d0)
			MX8MMN(IOMUXC_SD2_DATA1_USDHC2_DATA1, 0x1d0)
			MX8MMN(IOMUXC_SD2_DATA2_USDHC2_DATA2, 0x1d0)
			MX8MMN(IOMUXC_SD2_DATA3_USDHC2_DATA3, 0x1d0)
#define GP_USDHC2_CD	<&gpio2 12 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SD2_CD_B_GPIO2_IO12, 0x1c4)
		>;
	};

	pinctrl_usdhc2_100mhz: usdhc2grp100mhz {
		fsl,pins = <
			MX8MMN(IOMUXC_SD2_CLK_USDHC2_CLK, 0x194)
			MX8MMN(IOMUXC_SD2_CMD_USDHC2_CMD, 0x1d4)
			MX8MMN(IOMUXC_SD2_DATA0_USDHC2_DATA0, 0x1d4)
			MX8MMN(IOMUXC_SD2_DATA1_USDHC2_DATA1, 0x1d4)
			MX8MMN(IOMUXC_SD2_DATA2_USDHC2_DATA2, 0x1d4)
			MX8MMN(IOMUXC_SD2_DATA3_USDHC2_DATA3, 0x1d4)
		>;
	};

	pinctrl_usdhc2_200mhz: usdhc2grp200mhz {
		fsl,pins = <
			MX8MMN(IOMUXC_SD2_CLK_USDHC2_CLK, 0x196)
			MX8MMN(IOMUXC_SD2_CMD_USDHC2_CMD, 0x1d6)
			MX8MMN(IOMUXC_SD2_DATA0_USDHC2_DATA0, 0x1d6)
			MX8MMN(IOMUXC_SD2_DATA1_USDHC2_DATA1, 0x1d6)
			MX8MMN(IOMUXC_SD2_DATA2_USDHC2_DATA2, 0x1d6)
			MX8MMN(IOMUXC_SD2_DATA3_USDHC2_DATA3, 0x1d6)
		>;
	};

	pinctrl_usdhc3: usdhc3grp {
		fsl,pins = <
			MX8MMN(IOMUXC_NAND_WE_B_USDHC3_CLK, 0x190)
			MX8MMN(IOMUXC_NAND_WP_B_USDHC3_CMD, 0x1d0)
			MX8MMN(IOMUXC_NAND_DATA04_USDHC3_DATA0, 0x1d0)
			MX8MMN(IOMUXC_NAND_DATA05_USDHC3_DATA1, 0x1d0)
			MX8MMN(IOMUXC_NAND_DATA06_USDHC3_DATA2, 0x1d0)
			MX8MMN(IOMUXC_NAND_DATA07_USDHC3_DATA3, 0x1d0)
			/* Bluetooth slow clock */
			MX8MMN(IOMUXC_GPIO1_IO00_ANAMIX_REF_CLK_32K, 0x03)
		>;
	};

	pinctrl_usdhc3_100mhz: usdhc3grp100mhz {
		fsl,pins = <
			MX8MMN(IOMUXC_NAND_WE_B_USDHC3_CLK, 0x194)
			MX8MMN(IOMUXC_NAND_WP_B_USDHC3_CMD, 0x1d4)
			MX8MMN(IOMUXC_NAND_DATA04_USDHC3_DATA0, 0x1d4)
			MX8MMN(IOMUXC_NAND_DATA05_USDHC3_DATA1, 0x1d4)
			MX8MMN(IOMUXC_NAND_DATA06_USDHC3_DATA2, 0x1d4)
			MX8MMN(IOMUXC_NAND_DATA07_USDHC3_DATA3, 0x1d4)
		>;
	};

	pinctrl_usdhc3_200mhz: usdhc3grp200mhz {
		fsl,pins = <
			MX8MMN(IOMUXC_NAND_WE_B_USDHC3_CLK, 0x196)
			MX8MMN(IOMUXC_NAND_WP_B_USDHC3_CMD, 0x1d6)
			MX8MMN(IOMUXC_NAND_DATA04_USDHC3_DATA0, 0x1d6)
			MX8MMN(IOMUXC_NAND_DATA05_USDHC3_DATA1, 0x1d6)
			MX8MMN(IOMUXC_NAND_DATA06_USDHC3_DATA2, 0x1d6)
			MX8MMN(IOMUXC_NAND_DATA07_USDHC3_DATA3, 0x1d6)
		>;
	};

	pinctrl_wdog: wdoggrp {
		fsl,pins = <
			MX8MMN(IOMUXC_GPIO1_IO02_WDOG1_WDOG_B, 0x140)
		>;
	};

	pinctrl_wwan_rfkill: wwan-rfkillgrp {
		fsl,pins = <
			/* EC21 - Modem pins */
#define GP_EC21_RESET		<&gpio4 13 (GPIO_OPEN_DRAIN | GPIO_ACTIVE_LOW)>
			MX8MMN(IOMUXC_SAI1_TXD1_GPIO4_IO13, 0x140)	/* ET_RESET_N */
#define GP_EC21_USB_BOOT	<&gpio4 15 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI1_TXD3_GPIO4_IO15, 0x100)	/* ET_USB_BOOT */
#define GP_EC21_POWER_KEY	<&gpio4 11 GPIO_OPEN_DRAIN>
			MX8MMN(IOMUXC_SAI1_TXC_GPIO4_IO11, 0x140)	/* ET_ON_OFF */
#define GP_EC21_USIM_DETECT	<&gpio4 12 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI1_TXD0_GPIO4_IO12, 0x100)	/* ET_USIM_DETECT */
#define GP_EC21_WAKE_UP		<&gpio4 14 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI1_TXD2_GPIO4_IO14, 0x100)	/* ET_WAKE_UP */
#define GP_EC21_AP_READY	<&gpio4 17 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI1_TXD5_GPIO4_IO17, 0x100)	/* ET_AP_READY */
#define GP_EC21_ACTIVE_STATUS	<&gpio4 0 GPIO_ACTIVE_LOW>
			MX8MMN(IOMUXC_SAI1_RXFS_GPIO4_IO0, 0x1c0)	/* ET_STAT */
#define GP_EC21_NET_STAT	<&gpio4 20 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI1_MCLK_GPIO4_IO20, 0x80)	/* ET_NET_STAT */
#define GP_EC21_NET_MODE	<&gpio4 10 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI1_TXFS_GPIO4_IO10, 0x80)	/* ET_NET_MODE */
#define GP_EC21_RI		<&gpio4 16 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI1_TXD4_GPIO4_IO16, 0x80)	/* ET_RI */
		>;
	};

	pinctrl_zwave: zwavegrp {
		fsl,pins = <
#define GP_ZWAVE_RESET		<&gpio4 30 GPIO_ACTIVE_HIGH>
			MX8MMN(IOMUXC_SAI3_RXD_GPIO4_IO30, 0x100)
		>;
	};
};

/ {
	model = "Boundary Devices i.MX8MMini DWE";
	compatible = "boundary,imx8mm-dwe", "fsl,imx8mm";

	aliases {
		a53 = &A53_0;
	};

	bt-rfkill {
		compatible = "net,rfkill-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_bt_rfkill>;
		name = "bt-rfkill";
		type = <2>; /* Bluetooth */
		reset-gpios = GP_BT_RFKILL_RESET;
		status = "okay";
	};

	gpio-keys {
		compatible = "gpio-keys";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_gpio_keys>;

		power-fail {
			label = "Power failure";
			gpios = GP_GPIOKEY_POWER_FAIL;
			linux,code = <KEY_STOP>;
			gpio-key,wakeup;
		};
	};

	gpio_leds: leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_gpio_leds>;

		red1 {
			default-state = "off";
			gpios = GP_GPIOLEDS_RED1;
			retain-state-suspended;
		};

		green1 {
			default-state = "off";
			gpios = GP_GPIOLEDS_GREEN1;
			retain-state-suspended;
		};

		blue1 {
			default-state = "off";
			gpios = GP_GPIOLEDS_BLUE1;
			retain-state-suspended;
		};

		red2 {
			default-state = "off";
			gpios = GP_GPIOLEDS_RED2;
			retain-state-suspended;
		};

		green2 {
			default-state = "off";
			gpios = GP_GPIOLEDS_GREEN2;
			retain-state-suspended;
		};

		blue2 {
			default-state = "off";
			gpios = GP_GPIOLEDS_BLUE2;
			retain-state-suspended;
		};

		red3 {
			default-state = "off";
			gpios = GP_GPIOLEDS_RED3;
			retain-state-suspended;
		};

		green3 {
			default-state = "off";
			gpios = GP_GPIOLEDS_GREEN3;
			retain-state-suspended;
		};

		blue3 {
			default-state = "off";
			gpios = GP_GPIOLEDS_BLUE3;
			retain-state-suspended;
		};
	};

	pcie0_refclk: pcie0-refclk {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <100000000>;
	};

	reg_usdhc2_vqmmc: regulator-usdhc2-vqmmc {
		compatible = "regulator-gpio";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_reg_usdhc2_vqmmc>;
		regulator-name = "reg_sd2_vsel";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <3300000>;
		regulator-type = "voltage";
		regulator-boot-on;
		regulator-always-on;
		gpios = GP_USDHC2_VSEL;
		states = <1800000 0x1
			  3300000 0x0>;
	};

	reg_vref_1v8: regulator-vref-1v8 {
		compatible = "regulator-fixed";
		regulator-name = "vref-1v8";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
	};

	reg_vref_3v3: regulator-vref-3v3 {
		compatible = "regulator-fixed";
		regulator-name = "vref-3v3";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};

	reg_vref_3v7: regulator-vref-3v7 {
		compatible = "regulator-fixed";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_reg_3p7v>;
		regulator-name = "ec21_3v7";
		regulator-min-microvolt = <3700000>;
		regulator-max-microvolt = <3700000>;
		startup-delay-us = <60000>;
		gpio = GP_REG_3P7V;
		enable-active-high;
	};

	reg_wlan_vmmc: regulator-wlan-vmmc {
		compatible = "regulator-fixed";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_reg_wlan_vmmc>;
		regulator-name = "reg_wlan_vmmc";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		gpio = GP_REG_WLAN_VMMC;
		startup-delay-us = <70000>;
		enable-active-high;
	};

	wwan_rfkill: wwan-rfkill {
#if 0
		/* power-key is not connected, so don't use status */
		active-status-gpios = GP_EC21_ACTIVE_STATUS;
#endif
		compatible = "net,rfkill-gpio";
#if 1
		low-gpios = GP_EC21_USB_BOOT;
		high-gpios = GP_EC21_USIM_DETECT,GP_EC21_WAKE_UP,GP_EC21_AP_READY;
#else
		high-gpios = GP_EC21_USB_BOOT,GP_EC21_USIM_DETECT,GP_EC21_WAKE_UP,GP_EC21_AP_READY;
#endif
		name = "wwan-rfkill";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_wwan_rfkill>;
		power-key-low-off = <700>;
		power-key-low-on = <550>;
		power-key-gpios = GP_EC21_POWER_KEY;
		reset-gpios = GP_EC21_RESET;
		status = "okay";
		type = <5>;     /* WWAN */
		vdd-supply = <&reg_vref_3v7>;
		wakeup-dev = <&usbotg2>;
	};
};

&A53_0 {
	cpu-supply = <&reg_buck3>;
};

&ecspi2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_ecspi2>;
	fsl,spi-num-chipselects = <1>;
	cs-gpios = GP_ECSPI2_CS0;
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	/* U29 ZGM130S037HGN1R zwave controller */
	spidev@0 {
		compatible = "spidev";
		spi-max-frequency = <2000000>;
		reg = <0>;
	};
};

&fec1 {
	mdc-gpios = GP_MII_MDC;
	mdio-gpios = GP_MII_MDIO;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_fec1>;
#if 0
	phy-reset-gpios = GP_FEC1_RESET;
#endif
	phy-mode = "rgmii-id";
	phy-handle = <&ethphy0>;
	fsl,magic-packet;
	status = "okay";

	mdio {
		#address-cells = <1>;
		#size-cells = <0>;

		ethphy0: ethernet-phy {
			compatible = "ethernet-phy-ieee802.3-c22";
			interrupts-extended = GPIRQ_FEC1_PHY;
			reg-mask = <0x90>;
		};
	};
};

&gpu {
	status = "okay";
};

&i2c1 {
	clock-frequency = <400000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c1>;
	pinctrl-1 = <&pinctrl_i2c1_1>;
	scl-gpios = GP_I2C1_SCL;
	sda-gpios = GP_I2C1_SDA;
	status = "okay";

	pf8100@8 {
		compatible = "nxp,pf8100";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_i2c1_pf8100>;
		reg = <0x08>;

		regulators {
			reg_ldo1: ldo1 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <5000000>;
				regulator-min-microvolt = <1500000>;
			};

			reg_ldo2: ldo2 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <5000000>;
				regulator-min-microvolt = <1500000>;
				/* vselect low is 3.3V, high is 1.8V */
				vselect-en;
			};

			reg_ldo3: ldo3 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <5000000>;
				regulator-min-microvolt = <1500000>;
			};

			reg_ldo4: ldo4 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <5000000>;
				regulator-min-microvolt = <1500000>;
			};

			reg_buck1: buck1 {
				nxp,phase-shift = <0>;
				regulator-max-microamp = <4500000>;
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <1800000>;
				regulator-min-microvolt =  <400000>;
			};

			reg_buck2: buck2 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <1800000>;
				regulator-min-microvolt =  <400000>;
			};

			reg_buck3: buck3 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <1800000>;
				regulator-min-microvolt =  <400000>;
				fast-slew = <1>;
			};

			reg_buck4: buck4 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <1800000>;
				regulator-min-microvolt =  <400000>;
			};

			reg_buck5: buck5 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <1800000>;
				regulator-min-microvolt =  <400000>;
			};

			reg_buck6: buck6 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <1800000>;
				regulator-min-microvolt =  <400000>;
			};

			reg_buck7: buck7 {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <4100000>;
				regulator-min-microvolt = <1000000>;
			};

			reg_vsnvs: vsnvs {
				regulator-always-on;
				regulator-boot-on;
				regulator-max-microvolt = <3300000>;
				regulator-min-microvolt = <1800000>;
			};
		};
	};
};

&i2c2 {
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c2>;
	pinctrl-1 = <&pinctrl_i2c2_1>;
	scl-gpios = GP_I2C2_SCL;
	sda-gpios = GP_I2C2_SDA;
	status = "okay";

	rtc@52 {
		backup-switchover-dsm;
		compatible = "microcrystal,rv3028";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_i2c2_rv3028>;
		reg = <0x52>;
		interrupts-extended = GPIRQ_RV3028;
		wakeup-source;
	};
};

&i2c3 {
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c3>;
	pinctrl-1 = <&pinctrl_i2c3_1>;
	scl-gpios = GP_I2C3_SCL;
	sda-gpios = GP_I2C3_SDA;
	status = "disabled";
};

&i2c4 {
	clock-frequency = <100000>;
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_i2c4>;
	pinctrl-1 = <&pinctrl_i2c4_1>;
	scl-gpios = GP_I2C4_SCL;
	sda-gpios = GP_I2C4_SDA;
	status = "okay";
};

&mu {
	status = "okay";
};

&pcie0 {
	assigned-clocks = <&clk IMX8MM_CLK_PCIE1_AUX>,
			  <&clk IMX8MM_CLK_PCIE1_PHY>,
			  <&clk IMX8MM_CLK_PCIE1_CTRL>;
	assigned-clock-rates = <10000000>, <100000000>, <250000000>;
	assigned-clock-parents = <&clk IMX8MM_SYS_PLL2_50M>,
				 <&clk IMX8MM_SYS_PLL2_100M>,
				 <&clk IMX8MM_SYS_PLL2_250M>;
	clocks = <&clk IMX8MM_CLK_PCIE1_ROOT>,
		 <&clk IMX8MM_CLK_PCIE1_AUX>,
		 <&clk IMX8MM_CLK_PCIE1_PHY>,
		 <&pcie0_refclk>;
	clock-names = "pcie", "pcie_aux", "pcie_phy", "pcie_bus";
	disable-gpio = GP_PCIE0_DISABLE;
	ext_osc = <0>;
	l1ss-disabled;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_pcie0>;
	reset-gpio = GP_PCIE0_RESET;
	status = "okay";
};

&pgc_vpumix {
	dvfs-supply = <&reg_buck5>;
	idle-microvolt = <850000 805000 900000>;
};

&resmem {

	/* global autoconfigured region for contiguous allocations */
	linux,cma {
		compatible = "shared-dma-pool";
		reusable;
		size = <0 0x10000000>;
		alloc-ranges = <0 0x40000000 0 0x60000000>;
		linux,cma-default;
	};
};

&sai2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_sai2>;
	status = "okay";
};

&uart1 { /* BT */
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
	assigned-clocks = <&clk IMX8MMN(CLK_UART1)>;
	assigned-clock-parents = <&clk IMX8MMN(SYS_PLL1_80M)>;
	uart-has-rtscts;
	status = "okay";
};

&uart2 { /* console */
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart2>;
	assigned-clocks = <&clk IMX8MMN(CLK_UART2)>;
	assigned-clock-parents = <&clk IMX8MMN(CLK_24M)>;
	status = "okay";
};

&uart3 { /* J15 */
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart3>, <&pinctrl_zwave>;
	control-gpios = GP_ZWAVE_RESET;
#define M_RESET		1
	off_levels = <0>;
	rs232_levels = <M_RESET>;
	assigned-clocks = <&clk IMX8MMN(CLK_UART3)>;
	assigned-clock-parents = <&clk IMX8MMN(SYS_PLL1_80M)>;
	uart-has-rtscts;
	status = "okay";
};

&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart4>;
	assigned-clocks = <&clk IMX8MMN(CLK_UART4)>;
	assigned-clock-parents = <&clk IMX8MMN(CLK_24M)>;
	status = "okay";
};

&usbotg1 {
	dr_mode = "otg";
	over-current-active-low;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg1>;
	power-active-high;
	status = "okay";
};

&usbotg2 {
	autosuspend-delay-ms = <15000>;
	dr_mode = "host";
	over-current-active-low;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_usbotg2>;
	power-active-high;
	status = "okay";
};

&usdhc1 {
	bus-width = <8>;
	no-cqe;
	no-mmc-hs400;
	non-removable;
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc1>;
	pinctrl-1 = <&pinctrl_usdhc1_100mhz>;
	pinctrl-2 = <&pinctrl_usdhc1_200mhz>;
	reset-gpios = GP_EMMC_RESET;
	status = "okay";
	vmmc-supply = <&reg_vref_3v3>;
	vqmmc-1-8-v;
	vqmmc-supply = <&reg_vref_1v8>;
};

&usdhc2 {
	bus-width = <4>;
	cd-gpios = GP_USDHC2_CD;
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc2>;
	pinctrl-1 = <&pinctrl_usdhc2_100mhz>;
	pinctrl-2 = <&pinctrl_usdhc2_200mhz>;
	status = "okay";
	vqmmc-supply = <&reg_usdhc2_vqmmc>;
};

&usdhc3 {
	bus-width = <4>;
	fsl,sdio-async-interrupt-enabled;
	keep-power-in-suspend;
	no-sd-uhs-sdr104;
	non-removable;
	pinctrl-names = "default", "state_100mhz", "state_200mhz";
	pinctrl-0 = <&pinctrl_usdhc3>;
	pinctrl-1 = <&pinctrl_usdhc3_100mhz>;
	pinctrl-2 = <&pinctrl_usdhc3_200mhz>;
	pm-ignore-notify;
	status = "okay";
	vmmc-supply = <&reg_wlan_vmmc>;
	vqmmc-1-8-v;
	vqmmc-supply = <&reg_vref_1v8>;
};

&vpu_g1 {
	status = "okay";
};

&vpu_g2 {
	status = "okay";
};

&vpu_h1 {
	status = "okay";
};

&vpu_v4l2 {
	status = "okay";
};

&wdog1 {
	pinctrl-names = "default", "gpio";
	pinctrl-0 = <&pinctrl_wdog>;
	fsl,ext-reset-output;
	status = "okay";
};
